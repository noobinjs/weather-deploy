{"version":3,"sources":["context.js","Form.js","listitem.js","list.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","Form","getWeather","useContext","useState","value","setValue","className","onSubmit","e","string","preventDefault","trim","charAt","toUpperCase","slice","submitHandler","onChange","target","placeholder","ListItem","props","removeCity","weather","city","country","temp","src","icon","width","alt","onClick","id","List","map","item","index","App","weatherList","setWeatherList","already","setAlready","find","setFind","a","fetch","response","json","data","current","weatherLocation","location","condition","substring","console","log","includes","setTimeout","concat","name","temp_c","Date","now","useEffect","localStorage","getItem","storage","JSON","parse","setItem","stringify","Provider","filter","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9da9137.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, { useState, useContext } from 'react';\r\nimport Context from './context';\r\n\r\nexport default function Form() {\r\n  const { getWeather } = useContext(Context);\r\n  const [value, setValue] = useState('');\r\n\r\n  function submitHandler(e) {\r\n    e.preventDefault();\r\n    if (value.trim()) {\r\n      // console.log(value)\r\n      getWeather(capitalizeFirstLetter(value));\r\n      setValue('');\r\n    }\r\n  }\r\n\r\n  function capitalizeFirstLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={(e) => submitHandler(e)}>\r\n        <input\r\n          value={value}\r\n          onChange={(e) => setValue(e.target.value)}\r\n          placeholder=\"Enter city\"\r\n        />\r\n        <button> Get Weather</button>\r\n      </form>\r\n      {/* <p>{value}</p> */}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport Context from './context';\r\n\r\nexport default function ListItem(props) {\r\n  // console.log('props', props)\r\n  const { removeCity } = useContext(Context);\r\n  return (\r\n    <li className=\"itemstyle\">\r\n      <span>\r\n        {props.weather.city} &nbsp; &#124; {props.weather.country} &nbsp;{' '}\r\n        {props.weather.temp} &deg;\r\n        <img src={props.weather.icon} width=\"32\" alt=\"weather\" />\r\n      </span>\r\n      <button onClick={() => removeCity(props.weather.id)}>&times;</button>\r\n    </li>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ListItem from './listitem';\r\n\r\nexport default function List(props) {\r\n  //  console.log(props)\r\n  return (\r\n    <ul>\r\n      {props.weather.map((item, index) => (\r\n        <ListItem weather={item} index={index} key={item.id} />\r\n      ))}\r\n\r\n      {/* {console.log(props.weather)} */}\r\n    </ul>\r\n  );\r\n}\r\n","import Form from './Form';\nimport Context from './context';\nimport { useState, useEffect } from 'react';\nimport List from './list';\n\nfunction App() {\n  const [weatherList, setWeatherList] = useState([]);\n  const [already, setAlready] = useState(false);\n  const [find, setFind] = useState(false);\n\n  useEffect(() => {\n    if (localStorage.getItem('weather')) {\n      const storage = JSON.parse(localStorage.getItem('weather'));\n      setWeatherList(storage);\n      // console.log('mount')\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('weather', JSON.stringify(weatherList));\n  }, [weatherList]);\n\n  async function getWeather(city) {\n    const response = await fetch(\n      `https://api.weatherapi.com/v1/current.json?key=f29a1cdfd9644875b39204230210111&q=${city}&aqi=no`\n    );\n    const data = await response.json();\n    // console.log(data.current)\n    const weather = data.current;\n    const weatherLocation = data.location;\n    if (weather) {\n      const icon = 'https://' + weather.condition.icon.substring(2);\n      console.log(icon);\n      if (weatherList.find((item) => item.city.includes(city))) {\n        setAlready(true);\n        setTimeout(() => setAlready(false), 2000);\n        return;\n      }\n\n      setWeatherList(\n        weatherList.concat([\n          {\n            city: weatherLocation.name,\n            country: weatherLocation.country,\n            temp: weather.temp_c,\n            id: Date.now(),\n            icon,\n          },\n        ])\n      );\n      // localStorage.setItem('weather', JSON.stringify(weatherList) )\n      // console.log('weather1',weatherList)\n    } else {\n      setFind(true);\n      // console.log('can`t find')\n      setTimeout(() => setFind(false), 2000);\n    }\n  }\n  function removeCity(id) {\n    setWeatherList(weatherList.filter((item) => item.id !== id));\n  }\n  return (\n    <Context.Provider value={{ getWeather, removeCity }}>\n      <div className=\"container\">\n        {weatherList.length > 0 ? <span></span> : <h1>Weather list</h1>}\n        <Form />\n        {already ? <span className=\"already\">Already in list</span> : ''}\n        {find ? <span className=\"already\">Unknown city</span> : ''}\n        <List weather={weatherList} />\n\n        {/* { weatherList.map((item, index) => <p>{item} key={index}</p>\n        \n      )} */}\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}